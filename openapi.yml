openapi: "3.0.0"
info:
  version: v1
  title: Todos Service
  license:
    name: MIT
servers:
  - url: http://localhost:9527{basePath}
    description: The production API server
    variables:
      basePath:
        default: /todos/v1
paths:
  /todos:
    get:
      summary: List all todos
      operationId: listTodos
      tags:
        - todo
      responses:
        "200":
          description: Todos列表
          headers:
            X-Total-Count:
              description: Total count of all warnings match the query
              required: true
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
              examples:
                default:
                  value: |
                    [
                      {
                        "id": "602e1acfe8266779cd658d6f",
                        "todo": "aa",
                        "status": "open",
                        "owner": "5cb9a4edc48ad400120d28a0",
                        "updateAt": "2021-02-18T11:09:36.684Z",
                        "createAt": "2021-02-18T11:09:36.684Z"
                      },
                      {
                        "id": "602e35add589dc7eed8550ae",
                        "todo": "bb",
                        "status": "close",
                        "owner": "5cb9a4edc48ad400120d28a0",
                        "updateAt": "2021-02-18T11:09:36.684Z",
                        "createAt": "2021-02-18T11:09:36.684Z"
                      }
                    ]
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      summary: Create a todo
      operationId: createTodo
      tags:
        - todo
      requestBody:
        description: 添加todo
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoCreateDoc"
            examples:
              default:
                value: |
                  {
                    "todo": "cc"
                  }
      responses:
        "201":
          description: The todo created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
              examples:
                default:
                  value: |
                    {
                        "id": "602e1acfe8266779cd658d6f",
                        "todo": "cc",
                        "status": "open",
                        "owner": "5cb9a4edc48ad400120d28a0",
                        "updateAt": "2021-02-18T11:09:36.684Z",
                        "createAt": "2021-02-18T11:09:36.684Z"
                      }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /todos/{todoId}:
    get:
      summary: Find todo by id
      operationId: showTodoById
      tags:
        - todo
      parameters:
        - name: todoId
          in: path
          required: true
          description: The id of the todo to retrieve
          schema:
            type: string
            pattern: "[a-f\\d]{24}"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
              examples:
                default:
                  value: |
                    {
                        "id": "602e1acfe8266779cd658d6f",
                        "todo": "cc",
                        "status": "open",
                        "owner": "5cb9a4edc48ad400120d28a0",
                        "updateAt": "2021-02-18T11:09:36.684Z",
                        "createAt": "2021-02-18T11:09:36.684Z"
                      }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: Update todo
      operationId: updateTodo
      tags:
        - todo
      parameters:
        - name: todoId
          in: path
          required: true
          description: The id of todo
          schema:
            type: string
            pattern: "[a-f\\d]{24}"
      requestBody:
        description: Todo to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoDoc"
      responses:
        "200":
          description: The todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      description: deletes a single todo based on the ID supplied
      operationId: deleteTodo
      tags:
        - todo
      parameters:
        - name: todoId
          in: path
          description: ID of todo to delete
          required: true
          schema:
            type: string
            pattern: "[a-f\\d]{24}"
      responses:
        "204":
          description: todo deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

security:
  - bearerAuth: []

components:
  responses:
    NoContent:
      description: The resource was deleted successfully.
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    InternalError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"

  schemas:
    TodoDoc:
      type: object
      properties:
        todo:
          type: string
          description: todo
        status:
          type: string
          enum: ["open", "close"]
        owner:
          type: string

    TodoCreateDoc:
      allOf:
        - $ref: "#/components/schemas/TodoDoc"
        - type: object
          required:
            - todo
          properties:
            todo:
              type: string
              description: todo

    Todo:
      allOf:
        - $ref: "#/components/schemas/TodoDoc"
        - $ref: "#/components/schemas/MongoDefault"

    MongoDefault:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        updateAt:
          type: string
          format: date-time
        updateBy:
          type: string
        createAt:
          type: string
          format: date-time
        createBy:
          type: string

    Err:
      type: object
      required:
        - name
        - message
      properties:
        code:
          type: string
        type:
          type: string
        message:
          type: boolean
        name:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              keyword:
                type: string
              message:
                type: string
              path:
                type: string
              value:
                type: string

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
